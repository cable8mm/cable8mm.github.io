---
layout: single
title:  "웹 2.0시대를 여는 10가지 거대한 변화의 반론"
date:   2006-06-11 20:26:00
categories: opinion
tags: web20
author: Samgu Lee
---
[doyoung님](http://kimdoyoung.blogspot.com/2006/06/20-10.html)은 Channy로 잘 알려진 윤석찬 팀장님의 웹 2.0의 개념을 정리한 10가지 변화를 잘 정리해 주셨습니다. 웹 2.0이라는 말만 나오면 우려되는 바이지만, 기술적인 내용을 너무 정치적으로 몰고 나아간다는 것 같습니다.

이에 반론을 해 봅니다.

## 1. 웹 표준을 지켜라.

웹표준을 지켜야 하는 이유는 여러가지 브라우져에 제대로 혹은 잘 보이게 하는 가장 편리한 방법이기 때문이지 그 이상도 아닙니다. 그리고, 테이블도 엄연한 표준이지만, 레이아웃을 테이블로 잡는 것은 웹표준이 아니라는 말은 어패가 있습니다.

실제 CSS를 이용한 레이아웃은 테이블에 비해서 수정이 쉽다고 하지만, 아주 간단한 레이아웃이 아닌 약간만 복잡한 레이아웃을 CSS만으로 적용하려 하면 테이블에 비해서 아주 많은 노력이 있어야 합니다. 테이블이 매우 직관적인데 비해서 CSS는 코드 자체만으로 디자인이 머리에 그려지질 않기 때문에 수정이 쉽지도 않습니다. 또한, 테이블에 비해서 CSS는 브라우져마다 약간씩 적용되는 바가 틀리기 때문에(padding이나 margin 등) CSS 핵이라는 전혀 필요없는 코드가 들어가야 합니다.

또한, CSS가 좋다라고 이야기 할 때 흔히 등장하는 이야기로 시작장애인이나 모바일용 웹사이트를 CSS의 수정만으로 만들 수 있다는 말은 일리 있는 말로 들리지만, 상업적 혹은 대형 웹사이트를 제작할 때 경험이 조금이라도 있는 분은 모바일용 웹사이트는 완전히 새로 제작해야 한다는 것을 알 수 있습니다. 이에 대해서는 많은 분량의 글이 요구되므로 차후에 설명하도록 하겠습니다.

CSS를 썼을 때 장점이라고 한다면 코드 자체의 양의 많이 줄어든다는 데 있습니다. 이 것은 꽤 중요한 것으로 포탈사이트의 첫페이지는 이 이유때문에 CSS를 적용하고 있습니다.

## 2. 모든 브라우저를 지원하라.

이 것은 당연합니다. 하지만 모든 브라우져에 적용할 수 있게 제작하기 위해서는 테이블 베이스의 디자인 밖에는 없습니다. 오페라와 같은 브라우져에서 제대로 보이는 디자인을 CSS로 구현하는 것은 실질적으로 불가능합니다. 아주 간단한 디자인이라면 몰라도...

그리고, 이 부분이 중요한 이유는 또 한가지가 있는데, 광고가 들어가는 웹사이트에서 타브라우져로 보았을때 광고가 제대로 보여지지 않는다면 신뢰도에 큰 문제가 생깁니다. 페이지뷰로 단가가 책정되는 이미지 광고의 경우 보여지지도 않는 광고로 광고주가 광고비를 지급하기 때문입니다. 얼마전까지 야후!의 뉴스페이지 상단 728X90사이즈의 광고가 파이어폭스에서 하단 20픽셀 정도밖에는 보이지 않는 적이 있었습니다. 그것도 꽤 오랫동안...

## 3. 문자 인코딩을 UTF-8로 바꿔라.

사실 이 문제는 약간 복잡합니다. 유니코드가 어떤 디바이스에서 구현되기 위해서는 방대한 문자 테이블이 저장되어야 하고, 대규모의 폰트가 있어야 합니다. MS에서 제공하는 OS는 대부분 유니코드 폰트(폰트 이름에 Unicode가 포함되어 있음)가 들어있지만, 대부분의 모바일에는 들어있지 않습니다. 즉, 서비스에 따라서 틀려지는 것입니다.

더군다나 UTF-8이라는 문자셋은 EUC-KR보다 훨씬 많은 용량을 잡아먹습니다. EUC-KR은 글자당 2바이트이지만, UTF-8은 최소 3바이트를 잡아먹기 때문에 대체로 1.5배에서 2배까지 차이가 납니다.

UTF-8을 썼을 때의 강력한 잇점은 여러가지 언어로 되어 있는 웹사이트를 가장 손쉽게 제작할 수 있다는 점입니다.

인용한 글에서 지적한, 한글로 된 페이지가 읽히지 않는 것은 또 다른 문제입니다. 인터넷 주소인 URL은 ASCII와 -(Dash)만으로 제작되도록 권고되고 있습니다. 보통 웹사이트 주소를 등록할 때 한글 URL이 등록되지 않는 것과 마찬가지입니다.(이 부분은 퓨니코드라는 것으로 바뀌고 있습니다만...) 즉, 한글로 웹사이트에 올리는 문서를 저장하는 것 자체가 문제인 것이죠. 그리고 이 문제는 OS의 기본 문자셋도 고려해야 하므로 UTF-8로 만들어야 한다는데 이 문제를 거론하는 것 자체가 무리입니다.

하지만, UTF-8로 제작했을 때 많은 잇점이 존재하기 때문에 이 블로그에서도 UTF-8이 기본으로 되어 있습니다.

## 4. 짧고 이해하기 쉬운 주소를 만들어라.

이 문제는 벌써 8년 전부터 처음 인터넷 비지니스가 나온 시대부터 중요한 이슈가 되었던 부분입니다. 지금의 흐름이라고 한다면, 예전에 비해서 URL의 비중은 많은 없어졌습니다. 보통 검색엔진에서 검색 후 클릭을 하기 때문이지요. 저만해도 기억하는 웹사이트 주소는 20개를 넘지 않습니다.

## 5. 콘텐츠의 유통 방식을 고민하라.

콘텐츠를 유통하는 최고의 방식은 지금 나와있는 모든 컨텐츠 배급 시스템을 이용하고, 네이버 지식인에 광고 홍보성 글을 올리고, 주소를 모두 등록하고, 배너를 교환하는 등 많은 방법이 알려져 있습니다. 정작 중요한 것은 콘텐츠 유통 방식을 고민하는 것이 아니라 콘텐츠의 상업적 유통 방식을 고민하는 것입니다. 그리고, 콘텐츠 유통의 합법적 방법을 찾아야 합니다.

콘텐츠 유통의 대부격인 APPLE은 RSS등을 이용하지 않아도 세계 최고의 배급 시스템을 완비했습니다. 그것도 합법적으로 구현하고 있습니다. 이 부분은 생각처럼 간단한 문제가 아닙니다. 소리바다도 RSS등을 사용하지 않고 한국 최고의 유통 시스템을 만들려 하고 있습니다.

RSS가 컨텐츠를 보거나 듣는 사용자 입장에서는 매력적으로 보일 수도 있습니다. 하지만, 사업자 입장에서는 아직까지 메타 사이트나 포탈 사이트의 광고 수익을 올리는 정도 밖에는 보이질 않습니다.

가장 중요한 것은 콘텐츠 자체의 질에 있습니다. 그리고, 콘텐츠로 영업을 하는 기업은 해당 웹사이트의 소비자 신뢰도를 높이는데 최선을 다해야 합니다. 저의 여러가지 테스트의 결과로 나타나는 공통된 것은 웹사이트 신뢰도가 방문자의 성격을 바꿔놓는다는 것입니다.

## 6. API를 공개해 사용자들을 끌어들여라.

중요한 것은 API를 공개하는 회사의 데이터 신뢰도 입니다. Google Maps가 최고의 매쉬업 플랫폼이 된 이유는 지도를 무료로 제공하기 때문입니다. 네이버의 OpenAPI가 지지부진한 이유는 OpenAPI를 이용해 받을 수 있는 데이터가 쓸모가 없어서 입니다.

개발자는 기술적으로 API를 공개하건 말건간에 웹사이트에 있는 데이터를 재가공하는데 아무런 어려움이 없습니다. 현재의 한국 포탈들이 정보를 공개하지 않고 있는데 API를 공개하면 뭐에 써먹을 수 있을지 모르겠습니다.

API를 제공하느냐 마느냐 이전에 신뢰할만한 데이터를 가지고 있느냐가 문제의 핵심입니다. 만약 어떤 포탈에서 영어사전을 내용까지 제공하는 API를 제공하기만 하면 1년도 안되어 100개 이상의 매쉬업이 나오리라 확신합니다.

## 7. 집단지성을 활용하라.

집단지성이라는 말이 나오기 전에 Google은 초창기 때부터 인터넷에 민주주의가 작동된다고 선언했습니다. 지금은 전혀 그 말이 통하질 않습니다. 그것도 오프라인에 비해서 더욱 그렇습니다.

어느 사회나 있는 것이 악질 사용자 들입니다. 온라인에서는 스패머가 그러한데, 이들의 행위 자체는 불법이 아닙니다. 고작해야 회사의 약관을 어긴 정도입니다. 태그, 트랙백 등은 구조상 스패머를 막을 수 있는 방법이 전혀 없습니다. 간단한 스크립트로 한개의 URL에서 수천만개의 페이지를 만들 수 있고, 적절한 태그를 섞어서 만들고, 다른 블로그에 트랙백을 쏜다고 가정해 봅시다.(지금도 매우 흔하게 일어나는 일들입니다.)

Google의 PageRank는 한개의 웹사이트가 1표를 갖는다라는 것으로 출발을 했고(백링크), 그것은 얼마전 대규모의 빅대디로 인해 최근 사용자의 대규모 검색 및 링크 데이터를 이용하는 것으로 바뀌었습니다. 그리고 트러스트 랭크라는 믿을 수 있는 웹사이트를 랭크 10으로 잡고, 백링크로 순위를 메기는 방식이 연구되고 있습니다.

태그라는 것을 유심히 본 사용자는 알겠지만, 자신의 블로그에 태그를 붙이는 것도 공부를 해야 하는 것입니다. 사실 태그라는 것은 신문사 웹사이트에 키워드라는 것으로 오래전부터 구현되어 온 것인데 그것이 블로그로 확장된 것입니다. 신뢰도 없는 태그가 쓸모가 있을까요?

## 8. 가벼운 플랫폼을 써라.

플랫폼의 선택은 프로젝트에 따라 틀립니다. 만약 동일 프로젝트에 플랫폼을 선택한다면 당연히 최단시간에 최고의 효과를 올릴 수 있는 플랫폼을 선택합니다. 그 이유에서 PHP와 플래쉬 등이 단기간에 최고의 인기를 누리고 있습니다.

## 9. 더 많은 기능을 제공해라.

AJAX에 대한 미래는 많은 논의가 있었지만, 실제 테스트를 해 보면 현재 나오고 있는 얘기와는 많이 틀리다는 것을 알 수 있습니다.

8번에서도 나왔지만, 어떤 프로젝트에서 중요한 것은 최단시간의 최고의 효과입니다. AJAX는 그 면에선 절대 최선의 선택이 아닙니다. 프로그래머가 AJAX를 익히기 위해서는 매우 많은 시간이 걸립니다. AJAX는 새로운 기술은 아니지만, Google Maps가 나오고 나서야 인정을 받기 시작했습니다. 그리고, 그것을 보고 많은 프로그래머가 AJAX로 코딩을 했지만, 생각처럼 만만치 않다는 것을 경험했습니다. AJAX로 아주 간단하지 않는 프로젝트를 마친다는 것은 매우매우 어려운 일입니다.

AJAX가 어려운 것은 라이브러리라는 것이 존재하지 않는다는데 있습니다. 프로그램이라는 것은 세월이 흘러가면서 어떤 기능에 최적화된 라이브러리가 제공되고, 그것을 클래스라고 하는 것으로 비지니스에 맞춰가면서 완성도를 높입니다. 하지만, AJAX는 최근 Google이 공개한 라이브러리 말고는 쓸만한 것을 찾기가 매우 힘듭니다. Google Maps가 나온지 꽤 오랜 세월이 흘렀지만, 다른 회사에서 구현한 AJAX는 한국에선 개인화 페이지 정도입니다. 그리고, 동일 기능이라면 플래쉬로 구현하는 것이 훨씬 수월할 때도 많습니다.

글에서 인용한 ThinkFree라는 웹기반 오피스는 자바 버추어 머신이라는 프로그램이 OS에 이식이 되어 있어야 쓸 수 있는 것으로(AJAX버젼은 간단한 워드프로세서 버젼에서만 작동됨), 이것은 액티브엑스를 쓰는 것과 별반 차이가 없습니다.

## 10. 브라우저의 한계를 넘어서라.

서비스로의 프로그램 개념은 오래전부터 나온 것이지만, 최대 소프트웨어 업체인 MS가 그동안 신경을 쓰지 않는 이유는 수익성이 없기 때문입니다. 그래서, 웹기반이던 설치형 기반이던 ASP라는 형식의 서비스를 시도한 기업이 꽤 있었습니다만, 아쉽게도 MS의 우려처럼 수익성의 악화로 현재까지 명맥을 이어온 기업은 소비자를 상대로 한 서비스가 아닌 컴퓨터 A/S 회사에 직접 방문하지 않아도 컴퓨터를 고칠 수 있는 아란타같은 회사의 원격조정 프로그램 정도입니다.

MS가 현재 이 서비스에 관심을 갖는 이유는 Google의 수익성을 본 것이지 그 이상도 이하도 아닙니다. 세계적으로 본다면 소프트웨어 시장보다는 광고 시장이 훨씬 큽니다. 그리고, Google은 웹에서만이 아닌 모든 콘텐츠 전송이 되는 디바이스나 책 같은 매체에도 광고를 전송하는 시스템을 구현하고 있습니다. 이 시장 때문에 MS가 Live.com을 제작하게 된 것입니다.(스티브 발머는 악담으로 유명하지만, 괜찮은 통찰력을 가지고 있는 사람입니다. 이 사람은 서비스에 있어서 수익이라는 것이 얼마나 중요한지 본능적으로 알고 있습니다.)

웹 2.0... 이것저것 갖다 붙인다고 새로운 개념이 나오는 것은 아닙니다.

Update.

위 글은 doyoung님의 글이 아니라 [이정환님의 글](http://www.leejeonghwan.com/media/archives/000627.html)입니다.

Update 2.
이 글에 대한 웹표준에 관한 글을 [일모리님 블로그에 포스팅](http://ilmol.com/wp/2006/06/12/236/)되었습니다.

더불어 nmind님의 블로그에 [웹표준에 대한 오해의 글](http://www.nmindplus.com/2006/06/12/misunderstanding/)이 포스팅되었습니다.
